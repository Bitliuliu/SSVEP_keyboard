{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Debu",
				"Debug.Log((1"
			],
			[
				"up",
				"updateCounter"
			],
			[
				"toin",
				"RoundToInt(float f)\tint"
			],
			[
				"R",
				"Round(float f)\tfloat"
			],
			[
				"mat",
				"Mathf\tMathf"
			],
			[
				"text",
				"textOutput"
			],
			[
				"avera",
				"AverageNeighbourSamples()\tvoid"
			],
			[
				"sam",
				"sampleAverage"
			],
			[
				"numsa",
				"numSamples"
			],
			[
				"num",
				"numSamples\tint"
			],
			[
				"val",
				"value\tfloat { get; set; }"
			],
			[
				"lo",
				"Log(object message)\tvoid"
			],
			[
				"numsam",
				"numSamplesTaken"
			],
			[
				"a",
				"Abs(float f)\tfloat"
			],
			[
				"bott",
				"bottomLarge"
			],
			[
				"Microphone",
				"MicrophoneInput\tMicrophoneInput"
			],
			[
				"Bla",
				"BlackmanHarris\tFFTWindow"
			],
			[
				"to",
				"ToggleEEG\tToggleEEG"
			],
			[
				"eqh",
				"eqHeightLarge"
			],
			[
				"eqHei",
				"eqHeightSmall"
			],
			[
				"eegre",
				"eegrect"
			],
			[
				"eegrec",
				"eegrectLarge"
			],
			[
				"Rect",
				"RectTransform"
			],
			[
				"upda",
				"UpdateEQ()\tvoid"
			],
			[
				"b",
				"BlackmanHarris\tFFTWindow"
			],
			[
				"f",
				"float"
			],
			[
				"Rou",
				"RoundToInt"
			],
			[
				"floor",
				"FloorToInt(float f)\tint"
			],
			[
				"values",
				"values.Length"
			],
			[
				"c",
				"CopyTo(Array array, int index)\tvoid"
			],
			[
				"roun",
				"RoundToInt(float f)\tint"
			],
			[
				"rou",
				"RoundToInt(float f)\tint"
			],
			[
				"value",
				"values.Length"
			],
			[
				"get",
				"GetComponentsInChildren<T>()\tT[]"
			],
			[
				"audios",
				"AudioSource\tAudioSource"
			],
			[
				"Ge",
				"GetPosition(string deviceName)\tint"
			],
			[
				"Getcom",
				"GetComponent<T>()\tT"
			],
			[
				"pro",
				"probability"
			],
			[
				"Sor",
				"Sort(Array array, IComparer comparer)\tvoid"
			],
			[
				"ge",
				"GetComponentsInParent<T>()\tT[]"
			],
			[
				"ui",
				"guiElement\tComponent { get; }"
			],
			[
				"in",
				"InputText(string t)\tvoid"
			],
			[
				"te",
				"textOutput"
			],
			[
				"keys",
				"keys\tAnimationCurve.*"
			],
			[
				"Getchil",
				"GetComponentsInChildren<T>()\tT[]"
			],
			[
				"h",
				"cycleHz\tfloat"
			],
			[
				"for",
				"foreach\tforeach"
			],
			[
				"getcom",
				"GetComponents(List<T> results)\tvoid"
			],
			[
				"s",
				"sprites"
			],
			[
				"col",
				"color\tColor { get; set; }"
			],
			[
				"color",
				"ColorSpace\tColorSpace"
			],
			[
				"Col",
				"Color32\tColor32"
			],
			[
				"sha",
				"DOShadowStrength(float endValue, float duration)\tTweener"
			]
		]
	},
	"buffers":
	[
		{
			"file": "Assets/scripts/SSVEPKeyboardModel.cs",
			"settings":
			{
				"buffer_size": 3660,
				"encoding": "UTF-8 with BOM",
				"line_ending": "Unix"
			}
		},
		{
			"file": "Assets/scripts/MicrophoneInput.cs",
			"settings":
			{
				"buffer_size": 9731,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "Assets/scripts/RektTransform.cs",
			"settings":
			{
				"buffer_size": 25494,
				"encoding": "UTF-8 with BOM",
				"line_ending": "Unix"
			}
		},
		{
			"file": "Assets/scripts/Flicker.cs",
			"settings":
			{
				"buffer_size": 1172,
				"encoding": "UTF-8 with BOM",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "using UnityEngine;\nusing System.Collections;\n\npublic class Flicker3D : MonoBehaviour {\n    public Color c1;\n    public Color c2;\n    public Material mat;\n    public float cycleHz; // Hz, the mesurement of cycles.\n    private int updateCounter = 0;\n    private bool swap = false;\n\n    float dtime = 0; // delta time\n\n    void Awake() {\n    \t//mat = gameObject.GetComponent<Material>();\n        //Application.targetFrameRate = 60;\n    }\n    // Update is called once per frame\n\n    void Start() {\n    \tmat.color = c1;\n    }\n\n    void Update() {\n    \tMakeFlicker();\n        //Debug.Log(\"Seconds: \" + Time.time.ToString() + \" Flashes: \" + updateCounter.ToString() + \"Hz expected: \" + cycleHz.ToString() + \" Hz actual: \" + (updateCounter / Time.time).ToString());\n    \t//Debug.Log((1/Time.deltaTime).ToString());\n    }\n\n    public void MakeFlicker() {\n        // update frequency time-step\n        dtime += Time.deltaTime;\n\n        // Sample the waveform at a specific time.\n        float wave = Mathf.Sin( (dtime * 2.0f * Mathf.PI) * cycleHz);\n\n        //print (dtime);\n        //print (wave);\n\n        // Cycle between sprites based on the waveform.\n        if (wave > 0.0f) {\n            mat.color = c1;\n            // if (swap) {\n            //     updateCounter++;\n            //     swap = false;\n            // }\n            //print (\"White\");\n        } else {\n            mat.color = c2;\n            // swap = true;\n            //print (\"Black\");\n        }\n\n        // prevents dtime from climbing to infinity,\n        // by stepping it back in the waveform to a point\n        // of equal value.\n        if (wave == 0.0f) {\n            dtime = 0.0f;\n        }\n    }\n}\n",
			"file": "Assets/scripts/Flicker3D.cs",
			"file_size": 1658,
			"file_write_time": 131200735290000000,
			"settings":
			{
				"buffer_size": 1670,
				"line_ending": "Unix"
			}
		},
		{
			"file": "Assets/scripts/Fps.cs",
			"settings":
			{
				"buffer_size": 495,
				"encoding": "UTF-8 with BOM",
				"line_ending": "Unix"
			}
		},
		{
			"file": "Assets/scripts/EQView.cs",
			"settings":
			{
				"buffer_size": 2121,
				"encoding": "UTF-8 with BOM",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "pack",
		"selected_items":
		[
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"unity",
				"Set Syntax: Unity C#"
			],
			[
				"packa",
				"Preferences: Browse Packages"
			],
			[
				"",
				"Build With: Markdown"
			]
		],
		"width": 485.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"cd Omnisharp",
			"git clone https://github.com/nosami/OmniSharpServer.git",
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/scripts"
	],
	"file_history":
	[
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/scripts/SSVEPKeyboardView.cs",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/scripts/TextOutputDisplay.cs",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/scripts/RektTransform.cs",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/scripts/NextLetterProbability.cs",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/scripts/EQView.cs",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/scripts/Flicker.cs",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/scripts/LineOutput.cs",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/scripts/MicrophoneInput.cs",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/scripts/ToggleEEG.cs",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/Resources/Text/NextLetter.txt",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/Resources/Text/keyboard.txt",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/.gitignore",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/scripts/SSVEPKeyboardModel.cs",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/scripts/BlinkingCursor.cs",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/scripts/GridFitScreen.cs",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/SSVEP_keyboard.sublime-project",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/scripts/assigncolour.cs",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/scripts/KeyboardView.cs",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/scripts/KeyboardModel.cs",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/scripts/keyboardModel.cs",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/scripts/keyboardView.cs",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/scripts/flicker.cs",
		"/Users/ryanlintott/Desktop/omnisharp-server-master/README.md",
		"/Users/ryanlintott/Dev/Rancon/702_messy_music_maker/Assets/Scripts/SpinClick.cs",
		"/Users/ryanlintott/Dev/Rancon/702_messy_music_maker/Assets/Scripts/AnimationClick.cs",
		"/Volumes/Backpack/Website/hanaryan/style.css",
		"/Users/ryanlintott/Dev/Rancon/702_messy_music_maker/Assets/Scripts/doodleproductions/messymusic/config/PopulateModelConfig.cs",
		"/Volumes/Backpack/Website/medievalandmodernbestiary/blog_posts/gloss_shortcode.php",
		"/Volumes/Backpack/Website/medievalandmodernbestiary/blog_posts/post_sample.html",
		"/Volumes/Backpack/Website/abetterwaytodo/public_html/wp-config.php",
		"/Volumes/Backpack/Website/ryanlintottcom/public_html/blog_backup_files/.htaccess",
		"/Volumes/Backpack/Website/ryanlintottcom/public_html/blog_backup_files/wp-config.php",
		"/Volumes/Backpack/Website/ryanlintottcom/public_html/blog_backup_files/wp-blog-header.php",
		"/Volumes/Backpack/Website/ryanlintottcom/public_html/blog/sunrise.php",
		"/Volumes/Backpack/Website/ryanlintottcom/public_html/blog_backup_files/.htaccess.backup",
		"/Users/ryanlintott/Dev/Unity/Messy_Music/Assets/Scripts/doodleproductions/messymusic/config/PopulateModelConfig.cs",
		"/Users/ryanlintott/Dev/Unity/Messy_Music/.gitignore",
		"/Users/ryanlintott/Dev/Unity/Messy_Music/Assets/Scripts/doodleproductions/messymusic/vo/OverlayAnimationVO.cs",
		"/Users/ryanlintott/Dev/Rancon/702_messy_music_maker/Assets/Scripts/doodleproductions/messymusic/events/RequestModelEvent.cs",
		"/Users/ryanlintott/Dev/Unity/Messy_Music/Assets/Scripts/SpinClick.cs",
		"/Library/Logs/CrashPlan/service.log.0",
		"/Users/ryanlintott/Dev/Unity/Messy_Music/messy-music.sublime-project",
		"/Users/ryanlintott/Library/Application Support/Sublime Text 3/Packages/User/C#.sublime-settings"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"inputHz",
			"ResetSamples",
			"averageSamples",
			"sampleaverage",
			"averageSamples",
			"SetKeyStates",
			"SetKeyboardKey",
			"SetKeyStates",
			"SetKeyboardKey",
			"flicker",
			"grid",
			"targetHz",
			"focusHzWidth",
			"targetHz",
			"eq",
			"b1",
			"screenSize",
			"SCALE_LINES_Y",
			"spectrumHolder",
			"createFreqBar",
			"spectrumHolder",
			"_spinning",
			"camera",
			"cookie",
			"sound",
			"SoundVO"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"processedSamples",
			"fTarget",
			"fWidth",
			"fTarget",
			"image"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "Assets/scripts/SSVEPKeyboardModel.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3660,
						"regions":
						{
						},
						"selection":
						[
							[
								1112,
								1112
							]
						],
						"settings":
						{
							"apply_syntax_touched": true,
							"oops":
							{
								"19,24": "Using directive is not used by code and can be removed safely.",
								"2701,2703": "Convert to 'return' statement",
								"3255,3259": "Redundant 'else' keyword",
								"3436,3448": "no known errors.",
								"376,394": "'_SSVEPKeyboardView' should start with a lower case letter. (Rule 'Fields')"
							},
							"syntax": "Packages/Unity3D/UnityC#.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "Assets/scripts/MicrophoneInput.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9731,
						"regions":
						{
						},
						"selection":
						[
							[
								4896,
								4896
							]
						],
						"settings":
						{
							"apply_syntax_touched": true,
							"oops":
							{
								"19,24": "Using directive is not used by code and can be removed safely.",
								"45,50": "Using directive is not used by code and can be removed safely.",
								"6581,6586": "Parameter can be declared with base type",
								"6589,6593": "Parameter can be IList"
							},
							"syntax": "Packages/Unity3D/UnityC#.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1847.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "Assets/scripts/RektTransform.cs",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 25494,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"apply_syntax_touched": true,
							"syntax": "Packages/Unity3D/UnityC#.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "Assets/scripts/Flicker.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1172,
						"regions":
						{
						},
						"selection":
						[
							[
								485,
								485
							]
						],
						"settings":
						{
							"apply_syntax_touched": true,
							"oops":
							{
								"1113,1117": "Comparison of floating point numbers can be unequal due to the differing precision of the two values.",
								"42,47": "Using directive is not used by code and can be removed safely."
							},
							"syntax": "Packages/Unity3D/UnityC#.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "Assets/scripts/Flicker3D.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1670,
						"regions":
						{
						},
						"selection":
						[
							[
								1417,
								1390
							]
						],
						"settings":
						{
							"apply_syntax_touched": true,
							"oops":
							{
								"1595,1599": "Comparison of floating point numbers can be unequal due to the differing precision of the two values.",
								"19,24": "Using directive is not used by code and can be removed safely."
							},
							"syntax": "Packages/Unity3D/UnityC#.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 37.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "Assets/scripts/Fps.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 495,
						"regions":
						{
						},
						"selection":
						[
							[
								82,
								82
							]
						],
						"settings":
						{
							"apply_syntax_touched": true,
							"oops":
							{
								"41,46": "Using directive is not used by code and can be removed safely."
							},
							"syntax": "Packages/Unity3D/UnityC#.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "Assets/scripts/EQView.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2121,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"apply_syntax_touched": true,
							"oops":
							{
								"41,46": "Using directive is not used by code and can be removed safely.",
								"512,517": "Parameter can be declared with base type",
								"520,526": "Parameter can be IList"
							},
							"syntax": "Packages/Unity3D/UnityC#.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 100.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.markdown":
	{
		"height": 100.0
	},
	"output.variable_get":
	{
		"height": 100.0
	},
	"pinned_build_system": "",
	"project": "SSVEP_keyboard.sublime-project",
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Dev/Unity/letter_pop/letter_pop.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 333.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
