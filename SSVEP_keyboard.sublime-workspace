{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"num",
				"numSamplesTaken\tint"
			],
			[
				"Start",
				"StartCoroutine(IEnumerator routine)\tCoroutine"
			],
			[
				"IE",
				"IEnumerator\tIEnumerator"
			],
			[
				"s",
				"End(string deviceName)\tvoid"
			],
			[
				"Mic",
				"Microphone\tMicrophone"
			],
			[
				"Get",
				"GetComponentInParent(Type t)\tComponent"
			],
			[
				"GetCom",
				"GetComponent<T>()\tT"
			],
			[
				"get",
				"GetComponentsInChildren(Type t)\tComponent[]"
			],
			[
				"rese",
				"resetHigh\tfloat"
			],
			[
				"tri",
				"triggerHigh\tfloat"
			],
			[
				"ga",
				"GameObject\tGameObject"
			],
			[
				"_rese",
				"_resetHighSlider\tSlider"
			],
			[
				"res",
				"resetLow\tfloat"
			],
			[
				"diff",
				"diffMin\tfloat"
			],
			[
				"_di",
				"_diffLabel\tText"
			],
			[
				"Te",
				"Text\tText"
			],
			[
				"fill",
				"FillPercent\tint { get; set; }"
			],
			[
				"in",
				"InverseLerp(float a, float b, float value)\tfloat"
			],
			[
				"ma",
				"Max(int a, int b)\tint"
			],
			[
				"Ve",
				"Vector3()\tVector3()"
			],
			[
				"p",
				"localPosition\tVector3 { get; set; }"
			],
			[
				"ssv",
				"ssvepLowF\tfloat"
			],
			[
				"L",
				"Length\tint { get; }"
			],
			[
				"find",
				"FindGameObjectsWithTag(string tag)\tGameObject[]"
			],
			[
				"anch",
				"anchorMax\tVector2 { get; set; }"
			],
			[
				"Vec",
				"Vector2\tVector2"
			],
			[
				"GetC",
				"GetComponent<T>()\tT"
			],
			[
				"Set",
				"SetVerticalMarkerLines(float x, string label)\tvoid"
			],
			[
				"ge",
				"GetComponentInChildren(Type type)\tComponent"
			],
			[
				"gui",
				"guiText\tComponent { get; }"
			],
			[
				"Norm",
				"NormalizeToZero(float[] sIn)\tfloat[]"
			],
			[
				"Norma",
				"NormalizeToZeroSamples(float[] sIn)\tfloat[]"
			],
			[
				"sample",
				"sampleSetProcessed\tfloat[]"
			],
			[
				"Log",
				"LogSamples(float[] sIn)\tfloat[]"
			],
			[
				"sam",
				"sampleSetProcessed\tfloat[]"
			],
			[
				"Update",
				"UpdateUILine(Vector2[] data)\tvoid"
			],
			[
				"data",
				"dataTopRightValue\tVector2"
			],
			[
				"Ma",
				"Mathf\tMathf"
			],
			[
				"new",
				"newData\tVector2[]"
			],
			[
				"Uni",
				"UnityEngine\tUnityEngine"
			],
			[
				"_fi",
				"_fitWidth\tbool"
			],
			[
				"_lock",
				"_lockToPosition\tbool"
			],
			[
				"chil",
				"GetChild(int index)\tTransform"
			],
			[
				"getcomponen",
				"GetComponent<T>()\tT"
			],
			[
				"spri",
				"spriteKeysTransform\tTransform[]"
			],
			[
				"key",
				"keyColumns\tint"
			],
			[
				"chi",
				"DetachChildren()\tvoid"
			],
			[
				"de",
				"DestroyImmediate(Object obj)\tvoid"
			],
			[
				"Floo",
				"FloorToInt(float f)\tint"
			],
			[
				"to",
				"CeilToInt(float f)\tint"
			],
			[
				"Ce",
				"Ceil(float f)\tfloat"
			],
			[
				"floor",
				"Floor(float f)\tfloat"
			],
			[
				"keybo",
				"keyboardHeight\tfloat"
			],
			[
				"Cei",
				"CeilToInt(float f)\tint"
			],
			[
				"keyboa",
				"keyboardHeight\tfloat"
			],
			[
				"Vecto",
				"Vector3()\tVector3()"
			],
			[
				"lo",
				"localScale\tVector3 { get; set; }"
			],
			[
				"t",
				"transform\tTransform { get; }"
			],
			[
				"_key",
				"_keyParent\tGameObject"
			],
			[
				"Insta",
				"Instantiate(Object original, Vector3 position, Quaternion rotation)\tObject"
			],
			[
				"_scr",
				"_screenRot\tVector3"
			],
			[
				"ro",
				"rotation\tQuaternion { get; set; }"
			],
			[
				"_",
				"_screenScale\tVector3"
			],
			[
				"trigger",
				"triggerResetLow"
			],
			[
				"ssve",
				"ssvepHighValues"
			],
			[
				"scale",
				"scaleChange"
			],
			[
				"local",
				"localScale\tVector3 { get; set; }"
			],
			[
				"cycl",
				"cycleHz"
			],
			[
				"Debu",
				"Debug.Log((1"
			],
			[
				"up",
				"updateCounter"
			],
			[
				"toin",
				"RoundToInt(float f)\tint"
			],
			[
				"R",
				"Round(float f)\tfloat"
			],
			[
				"mat",
				"Mathf\tMathf"
			],
			[
				"text",
				"textOutput"
			],
			[
				"avera",
				"AverageNeighbourSamples()\tvoid"
			],
			[
				"numsa",
				"numSamples"
			],
			[
				"val",
				"value\tfloat { get; set; }"
			],
			[
				"numsam",
				"numSamplesTaken"
			],
			[
				"a",
				"Abs(float f)\tfloat"
			],
			[
				"bott",
				"bottomLarge"
			],
			[
				"Microphone",
				"MicrophoneInput\tMicrophoneInput"
			],
			[
				"Bla",
				"BlackmanHarris\tFFTWindow"
			],
			[
				"eqh",
				"eqHeightLarge"
			],
			[
				"eqHei",
				"eqHeightSmall"
			],
			[
				"eegre",
				"eegrect"
			],
			[
				"eegrec",
				"eegrectLarge"
			],
			[
				"Rect",
				"RectTransform"
			],
			[
				"upda",
				"UpdateEQ()\tvoid"
			],
			[
				"b",
				"BlackmanHarris\tFFTWindow"
			],
			[
				"f",
				"float"
			],
			[
				"Rou",
				"RoundToInt"
			],
			[
				"values",
				"values.Length"
			],
			[
				"c",
				"CopyTo(Array array, int index)\tvoid"
			],
			[
				"roun",
				"RoundToInt(float f)\tint"
			],
			[
				"rou",
				"RoundToInt(float f)\tint"
			],
			[
				"value",
				"values.Length"
			],
			[
				"audios",
				"AudioSource\tAudioSource"
			],
			[
				"Ge",
				"GetPosition(string deviceName)\tint"
			],
			[
				"Getcom",
				"GetComponent<T>()\tT"
			],
			[
				"pro",
				"probability"
			],
			[
				"Sor",
				"Sort(Array array, IComparer comparer)\tvoid"
			],
			[
				"ui",
				"guiElement\tComponent { get; }"
			],
			[
				"te",
				"textOutput"
			],
			[
				"keys",
				"keys\tAnimationCurve.*"
			],
			[
				"Getchil",
				"GetComponentsInChildren<T>()\tT[]"
			],
			[
				"h",
				"cycleHz\tfloat"
			],
			[
				"for",
				"foreach\tforeach"
			],
			[
				"getcom",
				"GetComponents(List<T> results)\tvoid"
			],
			[
				"col",
				"color\tColor { get; set; }"
			],
			[
				"color",
				"ColorSpace\tColorSpace"
			],
			[
				"Col",
				"Color32\tColor32"
			],
			[
				"sha",
				"DOShadowStrength(float endValue, float duration)\tTweener"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "# SSVEP Keyboard\nv0.13\n\nThis is a repository for the SSVEP keyboard built primarily for the icibici\n\n[icibici](https://github.com/icibici) is a hardware / software platform born with the intention of Developing an EEG under Â£20.\n\nOther repositories that are a part of the icibici Project:\n\n* [icibici Android diagnostic app](https://github.com/icibici/Android-diagnostic-app)\n* [icibici hardware](https://github.com/icibici/smartphone-bci-hardware)\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------\n\n**WARNING! THIS APP USES FLICKERING LIGHTS! DO NOT USE THIS APP IF YOU HAVE PHOTOSENSITIVE EPILEPSY**\n---------------------------------------------------------------------------------------------------\n\n---------------------------------------------------------------------------------------------------------------------------------------------------------\n\n## What is SSVEP?\n\n- [A Quick Intro to SSVEP](http://synaptitude.me/blog/a-quick-intro-to-ssvep-steady-state-visually-evoked-potential/)\n\n## The Unity App\n\nThe **SSVEP Keyboard** app is built in Unity (currently version 2017.3.0f3) and can run on following platforms:\n\n- iOS\n- Android (untested but should work)\n- Mac (up to v0.10 only)\n- PC (up to v0.10 only)\n- Linux\n(The Mac and PC versions are unlikely to work at the moment due to a bug in the signal pitch multiplication. This bug or a workaround will hopefully be developed in the future but for now these platforms will not be updated. iOS and Android versions work fine as the a lower sample rates can be used to acheive a similar result.)\n\nFor the iOS version please contact me directly (hello[at]abetterwaytodo.com[dot]com) and I can add you to the beta testers via TestFlight\nYou can download all other builds [here](https://drive.google.com/drive/folders/0B4W4Pn0tIMBXbGUtdmJCMW02dk0?usp=sharing))\n\n### SSVEP Keyboard app\n\nTo use the app, it must be connected to the icibici hardware (see instructions [here](https://github.com/icibici/smartphone-bci-hardware))\n\n- You can type on a keyboard using EEG signals from an icibici device\n- Two keyboards! Y/N and English with next letter preditiction\n- Scalable keyboard keys\n- The app will output a carrier wave signal (1000 Hz default but 5000 Hz might be the best setting to reduce noise) tone via the headphone jack to act as a carrier wave for the icibici (if you don't have anything plugged in it will emit the tone from your built-in speakers. It's annoying but you'll know the tone is being sent out)\n- The app will read a signal from the microphone and display a visual output of the frequecy bands +-60Hz from the carrier signal (default 940-1060 Hz). Touch this output to see a larger version of the graph.\n- Frequency bands relating to the modulated 15Hz and 20Hz brain signals are highlighted. (Look for peaks at these points).\n- Use demo signal toggle: Turn this on to play a pre-recorded EEG signal (from my own brain) instead of using the signal from your device. This will only work correctly when the carrier signal is set to 1000 Hz.\n- Difference visualiser\n  - The difference between the values of the peaks at 15Hz and 20Hz is displayed on the bottom of the screen.\n  - The white dot displays the current difference.\n  - A grey line in the middle shows the zero point.\n  - The red and blue lines show the trigger levels for low and high frequency triggers. If the dot moves beyond these lines then trigger timer starts. These lines can be dragged to set the trigger levels based on the signal from different users in different situations.\n  - The trigger timer is visualised by a red cicle around the white dot. When the circle is complete (and detect is on) it will trigger a keypress for the low or high frequency keys.\n  - Average & Trigger Time: This is the time in frames (there should be 60 frames per second) that the white dot needs to be in the trigger region before it triggers a keypress. It's also the amount of frames used to average the signal. If you set it to 1 you will see the raw signal without averaging. 120 frames (2 seconds) is the default setting. A rolling average is used so instead of just dividing the samples into blocks a block of the last set amount of frames is averaged every single frame.\n  - The two grey lines are reset lines. If the white dot moves past them towards the middle then the trigger timer is reset. These lines can also be repositioned.\n- Detect toggle: Turn on to drive the keyboard with your signal using the trigger levels as described above.\n- Use Demo Buttons: The keyboard can be operated manually by clicking the low frequecy and high frequecy buttons, this will simulate what would happen if the device had triggered a low or high frequency signal.\n- Click Idle Reset to reset the input. As the input averages over time this will clear out old data and start fresh. This button is less useful now so you can probably just ignore it.\n- Any keypresses will be entered in the output area at the top of the screen. Click this area to clear the output.\n\nImportant notes:\n- The framerate needs to be 60 fps for it to work properly. (check this value in the top right corner of the screen)\n- Make sure your phone volume is turned up to abut 80% (too high and it may not work at all, too low and there may be additional noise)\n\n### Flicker app\n\nThis app does not do any signal processing. It simply just displays flashing squares as specific frequencies. It could be used for testing with other BCIs or with another phone running the SSVEP keyboard app.\n\n- Display two squares that flicker at two different Hz rates set by the user.\n- Be sure to choose frequencies that divide evenly into 60Hz for accurate flickers (15Hz and 20Hz are used in the keyboard)\n- Note that the screen refresh rate (displayed in the app) should be 60fps for this to work correctly. (For example 30fps will not display 20Hz correctly as it does not divide evenly)\n\n\n",
			"file": "README.md",
			"file_size": 5985,
			"file_write_time": 131622226120000000,
			"settings":
			{
				"buffer_size": 5984,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "Assets/scripts/MicrophoneInput.cs",
			"settings":
			{
				"buffer_size": 16480,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "Assets/scripts/LineOutput.cs",
			"settings":
			{
				"buffer_size": 1003,
				"encoding": "UTF-8 with BOM",
				"line_ending": "Unix"
			}
		},
		{
			"file": "Assets/scripts/Fps.cs",
			"settings":
			{
				"buffer_size": 563,
				"encoding": "UTF-8 with BOM",
				"line_ending": "Unix"
			}
		},
		{
			"file": "Assets/scripts/SSVEPKeyboardModel.cs",
			"settings":
			{
				"buffer_size": 4640,
				"encoding": "UTF-8 with BOM",
				"line_ending": "Unix"
			}
		},
		{
			"file": "Assets/scripts/SSVEPKeyboardSpriteView.cs",
			"settings":
			{
				"buffer_size": 5338,
				"encoding": "UTF-8 with BOM",
				"line_ending": "Unix"
			}
		},
		{
			"file": "Assets/scripts/DiffUI.cs",
			"settings":
			{
				"buffer_size": 2049,
				"encoding": "UTF-8 with BOM",
				"line_ending": "Unix"
			}
		},
		{
			"file": "Assets/scripts/ValueText.cs",
			"settings":
			{
				"buffer_size": 325,
				"encoding": "UTF-8 with BOM",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "pack",
		"selected_items":
		[
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"unity",
				"Set Syntax: Unity C#"
			],
			[
				"packa",
				"Preferences: Browse Packages"
			],
			[
				"",
				"Build With: Markdown"
			]
		],
		"width": 485.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"cd Omnisharp",
			"git clone https://github.com/nosami/OmniSharpServer.git",
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard",
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard/Assets",
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard/Assets/Editor",
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard/Assets/Editor/CrossPlatformInput",
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard/Assets/scripts"
	],
	"file_history":
	[
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard/Assets/Editor/CrossPlatformInput/CrossPlatformInputInitialize.cs",
		"/Users/ryanlintott/Dropbox/Apps/2Do/tod/o_u_k_00cfe30bfd474743b0f5241e16f231bf_p_aeddc909452b40f9b77aab3f49de5bd7_i_b976ae046be24b5ba59928cc06df2386_d_.tod",
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard/Assets/scripts/Fps.cs",
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard/Assets/scripts/LineOutput.cs",
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard/Assets/scripts/LevelManager.cs",
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard/Assets/scripts/SSVEPKeyboardModel.cs",
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard/Assets/scripts/PinchZoom.cs",
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard/Assets/scripts/DiffUI.cs",
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard/Assets/scripts/ChartLineDataUI.cs",
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard/Assets/scripts/InputUI.cs",
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard/.gitignore",
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard/Assets/scripts/SSVEPKeyboardSpriteView.cs",
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard/Assets/unity-ui-extensions/Scripts/Primitives/UILineRenderer.cs",
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard/Assets/scripts/ToggleEEG.cs",
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard/Assets/scripts/ScreenSizePlane.cs",
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard/Assets/unity-ui-extensions/Scripts/Primitives/UIPrimitiveBase.cs",
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard/Assets/scripts/ZoomSquares.cs",
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard/Assets/Resources/Text/yn.txt",
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard/Assets/scripts/FlickerSprite.cs",
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard/Assets/scripts/Flicker3D.cs",
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard/Assets/scripts/flicker.cs",
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard/Assets/scripts/EQView.cs",
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard/Assets/scripts/MicrophoneInput.cs",
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard/README.md",
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard/Assets/scripts/Flicker.cs",
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard/Assets/Resources/Text/keyboard.txt",
		"/Volumes/Backpack/Library/_Standards/_Squint_standards/3dsmax2014/scripts/squint_scripts/squint_startup.ms",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/scripts/SSVEPKeyboardView.cs",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/scripts/TextOutputDisplay.cs",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/scripts/RektTransform.cs",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/scripts/NextLetterProbability.cs",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/scripts/EQView.cs",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/scripts/Flicker.cs",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/scripts/LineOutput.cs",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/scripts/MicrophoneInput.cs",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/scripts/ToggleEEG.cs",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/Resources/Text/NextLetter.txt",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/Resources/Text/keyboard.txt",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/.gitignore",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/scripts/SSVEPKeyboardModel.cs",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/scripts/BlinkingCursor.cs",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/scripts/GridFitScreen.cs",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/SSVEP_keyboard.sublime-project",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/scripts/assigncolour.cs",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/scripts/KeyboardView.cs",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/scripts/KeyboardModel.cs",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/scripts/keyboardModel.cs",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/scripts/keyboardView.cs",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/scripts/flicker.cs",
		"/Users/ryanlintott/Desktop/omnisharp-server-master/README.md",
		"/Users/ryanlintott/Dev/Rancon/702_messy_music_maker/Assets/Scripts/SpinClick.cs",
		"/Users/ryanlintott/Dev/Rancon/702_messy_music_maker/Assets/Scripts/AnimationClick.cs",
		"/Volumes/Backpack/Website/hanaryan/style.css",
		"/Users/ryanlintott/Dev/Rancon/702_messy_music_maker/Assets/Scripts/doodleproductions/messymusic/config/PopulateModelConfig.cs",
		"/Volumes/Backpack/Website/medievalandmodernbestiary/blog_posts/gloss_shortcode.php",
		"/Volumes/Backpack/Website/medievalandmodernbestiary/blog_posts/post_sample.html",
		"/Volumes/Backpack/Website/abetterwaytodo/public_html/wp-config.php",
		"/Volumes/Backpack/Website/ryanlintottcom/public_html/blog_backup_files/.htaccess",
		"/Volumes/Backpack/Website/ryanlintottcom/public_html/blog_backup_files/wp-config.php",
		"/Volumes/Backpack/Website/ryanlintottcom/public_html/blog_backup_files/wp-blog-header.php",
		"/Volumes/Backpack/Website/ryanlintottcom/public_html/blog/sunrise.php",
		"/Volumes/Backpack/Website/ryanlintottcom/public_html/blog_backup_files/.htaccess.backup",
		"/Users/ryanlintott/Dev/Unity/Messy_Music/Assets/Scripts/doodleproductions/messymusic/config/PopulateModelConfig.cs",
		"/Users/ryanlintott/Dev/Unity/Messy_Music/.gitignore",
		"/Users/ryanlintott/Dev/Unity/Messy_Music/Assets/Scripts/doodleproductions/messymusic/vo/OverlayAnimationVO.cs",
		"/Users/ryanlintott/Dev/Rancon/702_messy_music_maker/Assets/Scripts/doodleproductions/messymusic/events/RequestModelEvent.cs",
		"/Users/ryanlintott/Dev/Unity/Messy_Music/Assets/Scripts/SpinClick.cs",
		"/Library/Logs/CrashPlan/service.log.0",
		"/Users/ryanlintott/Dev/Unity/Messy_Music/messy-music.sublime-project",
		"/Users/ryanlintott/Library/Application Support/Sublime Text 3/Packages/User/C#.sublime-settings"
	],
	"find":
	{
		"height": 39.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"ResetKeyboardKeys",
			"detect",
			"_readSamplesOn",
			"ResetSamples",
			"Awake",
			"InitializeAudio",
			"_readSamplesOn",
			"ReadSamples",
			"diff",
			"UpdateTriggerPercent",
			"ResetKeyboardKeys",
			"detect",
			"useSSVEP",
			"ssvep",
			"ResetKeyboardKeys",
			"letterDelay",
			"samples",
			"detect",
			"ChooseKeyState",
			"samplerate",
			"sampleRate",
			"diff",
			"PressKeyboardKey",
			"PressKey",
			"useSSVEP",
			"toggle",
			"toggleUse",
			"ResetKeyboardKeys",
			"letterDelay",
			"PressKeyboardKey",
			"_chartLineDataUI",
			"smartphone",
			"SetLowestSampleRate",
			"_audio",
			"pitch",
			"sampleSetCounter",
			"_avgTimeSamples",
			"sampleSetPrev",
			"sampleProcessingMode",
			"sAvgWidth",
			"averageOverTime",
			"ReadSamples",
			"InitializeAudio",
			"t",
			"toggle",
			"_eqView",
			"EQView",
			"readsamples",
			"_readSamplesOn",
			"useClamp",
			"ResetSamples",
			"foreach",
			"triggerTime",
			"diff",
			"_avgTimeSamples",
			"ResetSamples",
			"numSamplesTaken",
			"averageOverTime",
			"sAvgWidth",
			"useMaxSamples",
			"max",
			"n",
			"sampleSetSize",
			"sampleSetCounter",
			"sampleSetProcessedPrev",
			"sampleSetPrev",
			"averageOverTime",
			"_avgTimeSamples",
			"useMaxSamples",
			"audio.clip",
			"ResetSamples",
			"specFFTwindow",
			"leftClamp",
			"ssvepHighValues[0]",
			"text",
			"averageOverTime",
			"logbase",
			"useMaxSamples",
			"useMax",
			"fMax",
			"sampleRate",
			"numSamples",
			"fmax",
			"_tone",
			"fRangeMin",
			"fMax",
			"sampleSetSize",
			"startValue",
			"fMax",
			"sampleSetSize",
			"useMaxSamples",
			"maxsamples",
			"boost",
			"Update",
			"eq",
			"keyboardActive",
			"build",
			"key",
			"toggle",
			"_keyboardFiles",
			"_nextLetterProbability",
			"lastLetter",
			"_SSVEPKeyboardView",
			"sampleRate",
			"fmax",
			"inputHz",
			"inputHZ",
			"sampleRate",
			"inputHz",
			"fps",
			"input",
			"44",
			"ssvepLowValues",
			" debug",
			"microphone",
			"inputHz",
			"maxSamples",
			"sAvgWidth",
			"audio",
			"inputHz",
			"ResetSamples",
			"averageSamples",
			"sampleaverage",
			"averageSamples",
			"SetKeyStates",
			"SetKeyboardKey",
			"SetKeyStates",
			"SetKeyboardKey"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"processedSamples",
			"fTarget",
			"fWidth",
			"fTarget",
			"image"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "README.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5984,
						"regions":
						{
						},
						"selection":
						[
							[
								1331,
								1331
							]
						],
						"settings":
						{
							"apply_syntax_touched": true,
							"syntax": "Packages/Markdown/Markdown.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "Assets/scripts/MicrophoneInput.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16480,
						"regions":
						{
						},
						"selection":
						[
							[
								3095,
								3107
							]
						],
						"settings":
						{
							"apply_syntax_touched": true,
							"oops":
							{
								"1006,1025": "Name should have prefix '_'. (Rule 'Fields').",
								"10291,10296": "Parameter can be declared with base type",
								"10299,10303": "Parameter can be IList",
								"10351,10356": "Use 'var' keyword",
								"1048,1063": "Name should have prefix '_'. (Rule 'Fields').",
								"10591,10596": "Parameter can be declared with base type",
								"10599,10603": "Parameter can be IList",
								"10632,10633": "Parameter can be IComparable",
								"10674,10679": "Use 'var' keyword",
								"11057,11062": "Use 'var' keyword",
								"11271,11276": "Use 'var' keyword",
								"11563,11568": "Use 'var' keyword",
								"11838,11843": "Use 'var' keyword",
								"12079,12084": "Use 'var' keyword",
								"1225,1232": "Name should have prefix '_'. (Rule 'Fields').",
								"12397,12402": "Use 'var' keyword",
								"12602,12607": "Use 'var' keyword",
								"1272,1283": "Name should have prefix '_'. (Rule 'Fields').",
								"12968,12973": "Use 'var' keyword",
								"13550,13555": "Use 'var' keyword",
								"14020,14025": "Use 'var' keyword",
								"1427,1436": "Name should have prefix '_'. (Rule 'Fields').",
								"14610,14615": "Use 'var' keyword",
								"14931,14937": "Convert to constant",
								"14949,14955": "Convert to constant",
								"14969,14976": "Convert to constant",
								"14991,14998": "Convert to constant",
								"1511,1521": "Name should have prefix '_'. (Rule 'Fields').",
								"15849,15862": "'setTriggerLow' should start with an upper case letter. (Rule 'Methods')",
								"15870,15873": "Parameter can be IComparable",
								"15914,15928": "'setTriggerHigh' should start with an upper case letter. (Rule 'Methods')",
								"15936,15939": "Parameter can be IComparable",
								"15981,15992": "'setResetLow' should start with an upper case letter. (Rule 'Methods')",
								"16000,16003": "Parameter can be IComparable",
								"16042,16054": "'setResetHigh' should start with an upper case letter. (Rule 'Methods')",
								"16062,16065": "Parameter can be IComparable",
								"16105,16118": "'setTimeString' should start with an upper case letter. (Rule 'Methods')",
								"16147,16158": "Assignment is redundant",
								"16284,16302": "'setFrequencyString' should start with an upper case letter. (Rule 'Methods')",
								"16331,16338": "Assignment is redundant",
								"1771,1781": "Convert to constant",
								"1957,1958": "Initializing field by default value is redundant",
								"1973,1988": "Name should have prefix '_'. (Rule 'Fields').",
								"1991,1996": "Initializing field by default value is redundant",
								"2028,2029": "Initializing field by default value is redundant",
								"2127,2128": "Initializing field by default value is redundant",
								"2187,2196": "Name should have prefix '_'. (Rule 'Fields').",
								"2286,2306": "Name should have prefix '_'. (Rule 'Fields').",
								"2309,2310": "Initializing field by default value is redundant",
								"2420,2421": "Initializing field by default value is redundant",
								"2438,2449": "Name should have prefix '_'. (Rule 'Fields').",
								"2452,2453": "Initializing field by default value is redundant",
								"2467,2478": "Name should have prefix '_'. (Rule 'Fields').",
								"45,50": "Using directive is not used by code and can be removed safely.",
								"4680,4690": "Redundant ToString() call",
								"762,775": "Name should have prefix '_'. (Rule 'Fields').",
								"797,816": "Name should have prefix '_'. (Rule 'Fields')."
							},
							"syntax": "Packages/Unity3D/UnityC#.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 898.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "Assets/scripts/LineOutput.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1003,
						"regions":
						{
						},
						"selection":
						[
							[
								287,
								287
							]
						],
						"settings":
						{
							"apply_syntax_touched": true,
							"oops":
							{
								"114,124": "Name should have prefix '_'. (Rule 'Fields').",
								"148,157": "Name should have prefix '_'. (Rule 'Fields').",
								"19,24": "Using directive is not used by code and can be removed safely.",
								"490,508": "'setFrequencyString' should start with an upper case letter. (Rule 'Methods')",
								"539,548": "Assignment is redundant",
								"88,96": "Name should have prefix '_'. (Rule 'Fields').",
								"955,966": "Parameter can be IComparable",
								"99,100": "Initializing field by default value is redundant"
							},
							"syntax": "Packages/Unity3D/UnityC#.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "Assets/scripts/Fps.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 563,
						"regions":
						{
						},
						"selection":
						[
							[
								212,
								212
							]
						],
						"settings":
						{
							"apply_syntax_touched": true,
							"syntax": "Packages/Unity3D/UnityC#.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "Assets/scripts/SSVEPKeyboardModel.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4640,
						"regions":
						{
						},
						"selection":
						[
							[
								855,
								855
							]
						],
						"settings":
						{
							"apply_syntax_touched": true,
							"oops":
							{
								"111,114": "Name should have prefix '_'. (Rule 'Fields').",
								"128,134": "Name should have prefix '_'. (Rule 'Fields').",
								"150,161": "Name should have prefix '_'. (Rule 'Fields').",
								"175,186": "Name should have prefix '_'. (Rule 'Fields').",
								"1875,1887": "Parameter can be IComparable",
								"19,24": "Using directive is not used by code and can be removed safely.",
								"309,310": "Initializing field by default value is redundant",
								"3325,3327": "Convert to 'return' statement",
								"4074,4078": "Redundant 'else' keyword",
								"410,428": "'_SSVEPKeyboardView' should start with a lower case letter. (Rule 'Fields')",
								"4255,4267": "no known errors.",
								"462,486": "'_SSVEPKeyboardSpriteView' should start with a lower case letter. (Rule 'Fields')",
								"808,819": "Name should have prefix '_'. (Rule 'Fields').",
								"838,846": "Name should have prefix '_'. (Rule 'Fields').",
								"849,854": "Initializing field by default value is redundant"
							},
							"syntax": "Packages/Unity3D/UnityC#.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "Assets/scripts/SSVEPKeyboardSpriteView.cs",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 5338,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"apply_syntax_touched": true,
							"syntax": "Packages/Unity3D/UnityC#.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "Assets/scripts/DiffUI.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2049,
						"regions":
						{
						},
						"selection":
						[
							[
								565,
								565
							]
						],
						"settings":
						{
							"apply_syntax_touched": true,
							"syntax": "Packages/Unity3D/UnityC#.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "Assets/scripts/ValueText.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 325,
						"regions":
						{
						},
						"selection":
						[
							[
								217,
								217
							]
						],
						"settings":
						{
							"apply_syntax_touched": true,
							"oops":
							{
								"0,5": "Using directive is not used by code and can be removed safely.",
								"26,31": "Using directive is not used by code and can be removed safely."
							},
							"syntax": "Packages/Unity3D/UnityC#.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 35.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 100.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.markdown":
	{
		"height": 100.0
	},
	"output.variable_get":
	{
		"height": 122.0
	},
	"pinned_build_system": "",
	"project": "SSVEP_keyboard.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Dev/Unity/letter_pop/letter_pop.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 333.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
