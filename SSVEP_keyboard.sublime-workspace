{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"num",
				"numSamplesTaken\tint"
			],
			[
				"Start",
				"StartCoroutine(IEnumerator routine)\tCoroutine"
			],
			[
				"IE",
				"IEnumerator\tIEnumerator"
			],
			[
				"s",
				"End(string deviceName)\tvoid"
			],
			[
				"Mic",
				"Microphone\tMicrophone"
			],
			[
				"Get",
				"GetComponentInParent(Type t)\tComponent"
			],
			[
				"GetCom",
				"GetComponent<T>()\tT"
			],
			[
				"get",
				"GetComponentsInChildren(Type t)\tComponent[]"
			],
			[
				"rese",
				"resetHigh\tfloat"
			],
			[
				"tri",
				"triggerHigh\tfloat"
			],
			[
				"ga",
				"GameObject\tGameObject"
			],
			[
				"_rese",
				"_resetHighSlider\tSlider"
			],
			[
				"res",
				"resetLow\tfloat"
			],
			[
				"diff",
				"diffMin\tfloat"
			],
			[
				"_di",
				"_diffLabel\tText"
			],
			[
				"Te",
				"Text\tText"
			],
			[
				"fill",
				"FillPercent\tint { get; set; }"
			],
			[
				"in",
				"InverseLerp(float a, float b, float value)\tfloat"
			],
			[
				"ma",
				"Max(int a, int b)\tint"
			],
			[
				"Ve",
				"Vector3()\tVector3()"
			],
			[
				"p",
				"localPosition\tVector3 { get; set; }"
			],
			[
				"ssv",
				"ssvepLowF\tfloat"
			],
			[
				"L",
				"Length\tint { get; }"
			],
			[
				"find",
				"FindGameObjectsWithTag(string tag)\tGameObject[]"
			],
			[
				"anch",
				"anchorMax\tVector2 { get; set; }"
			],
			[
				"Vec",
				"Vector2\tVector2"
			],
			[
				"GetC",
				"GetComponent<T>()\tT"
			],
			[
				"Set",
				"SetVerticalMarkerLines(float x, string label)\tvoid"
			],
			[
				"ge",
				"GetComponentInChildren(Type type)\tComponent"
			],
			[
				"gui",
				"guiText\tComponent { get; }"
			],
			[
				"Norm",
				"NormalizeToZero(float[] sIn)\tfloat[]"
			],
			[
				"Norma",
				"NormalizeToZeroSamples(float[] sIn)\tfloat[]"
			],
			[
				"sample",
				"sampleSetProcessed\tfloat[]"
			],
			[
				"Log",
				"LogSamples(float[] sIn)\tfloat[]"
			],
			[
				"sam",
				"sampleSetProcessed\tfloat[]"
			],
			[
				"Update",
				"UpdateUILine(Vector2[] data)\tvoid"
			],
			[
				"data",
				"dataTopRightValue\tVector2"
			],
			[
				"Ma",
				"Mathf\tMathf"
			],
			[
				"new",
				"newData\tVector2[]"
			],
			[
				"Uni",
				"UnityEngine\tUnityEngine"
			],
			[
				"_fi",
				"_fitWidth\tbool"
			],
			[
				"_lock",
				"_lockToPosition\tbool"
			],
			[
				"chil",
				"GetChild(int index)\tTransform"
			],
			[
				"getcomponen",
				"GetComponent<T>()\tT"
			],
			[
				"spri",
				"spriteKeysTransform\tTransform[]"
			],
			[
				"key",
				"keyColumns\tint"
			],
			[
				"chi",
				"DetachChildren()\tvoid"
			],
			[
				"de",
				"DestroyImmediate(Object obj)\tvoid"
			],
			[
				"Floo",
				"FloorToInt(float f)\tint"
			],
			[
				"to",
				"CeilToInt(float f)\tint"
			],
			[
				"Ce",
				"Ceil(float f)\tfloat"
			],
			[
				"floor",
				"Floor(float f)\tfloat"
			],
			[
				"keybo",
				"keyboardHeight\tfloat"
			],
			[
				"Cei",
				"CeilToInt(float f)\tint"
			],
			[
				"keyboa",
				"keyboardHeight\tfloat"
			],
			[
				"Vecto",
				"Vector3()\tVector3()"
			],
			[
				"lo",
				"localScale\tVector3 { get; set; }"
			],
			[
				"t",
				"transform\tTransform { get; }"
			],
			[
				"_key",
				"_keyParent\tGameObject"
			],
			[
				"Insta",
				"Instantiate(Object original, Vector3 position, Quaternion rotation)\tObject"
			],
			[
				"_scr",
				"_screenRot\tVector3"
			],
			[
				"ro",
				"rotation\tQuaternion { get; set; }"
			],
			[
				"_",
				"_screenScale\tVector3"
			],
			[
				"trigger",
				"triggerResetLow"
			],
			[
				"ssve",
				"ssvepHighValues"
			],
			[
				"scale",
				"scaleChange"
			],
			[
				"local",
				"localScale\tVector3 { get; set; }"
			],
			[
				"cycl",
				"cycleHz"
			],
			[
				"Debu",
				"Debug.Log((1"
			],
			[
				"up",
				"updateCounter"
			],
			[
				"toin",
				"RoundToInt(float f)\tint"
			],
			[
				"R",
				"Round(float f)\tfloat"
			],
			[
				"mat",
				"Mathf\tMathf"
			],
			[
				"text",
				"textOutput"
			],
			[
				"avera",
				"AverageNeighbourSamples()\tvoid"
			],
			[
				"numsa",
				"numSamples"
			],
			[
				"val",
				"value\tfloat { get; set; }"
			],
			[
				"numsam",
				"numSamplesTaken"
			],
			[
				"a",
				"Abs(float f)\tfloat"
			],
			[
				"bott",
				"bottomLarge"
			],
			[
				"Microphone",
				"MicrophoneInput\tMicrophoneInput"
			],
			[
				"Bla",
				"BlackmanHarris\tFFTWindow"
			],
			[
				"eqh",
				"eqHeightLarge"
			],
			[
				"eqHei",
				"eqHeightSmall"
			],
			[
				"eegre",
				"eegrect"
			],
			[
				"eegrec",
				"eegrectLarge"
			],
			[
				"Rect",
				"RectTransform"
			],
			[
				"upda",
				"UpdateEQ()\tvoid"
			],
			[
				"b",
				"BlackmanHarris\tFFTWindow"
			],
			[
				"f",
				"float"
			],
			[
				"Rou",
				"RoundToInt"
			],
			[
				"values",
				"values.Length"
			],
			[
				"c",
				"CopyTo(Array array, int index)\tvoid"
			],
			[
				"roun",
				"RoundToInt(float f)\tint"
			],
			[
				"rou",
				"RoundToInt(float f)\tint"
			],
			[
				"value",
				"values.Length"
			],
			[
				"audios",
				"AudioSource\tAudioSource"
			],
			[
				"Ge",
				"GetPosition(string deviceName)\tint"
			],
			[
				"Getcom",
				"GetComponent<T>()\tT"
			],
			[
				"pro",
				"probability"
			],
			[
				"Sor",
				"Sort(Array array, IComparer comparer)\tvoid"
			],
			[
				"ui",
				"guiElement\tComponent { get; }"
			],
			[
				"te",
				"textOutput"
			],
			[
				"keys",
				"keys\tAnimationCurve.*"
			],
			[
				"Getchil",
				"GetComponentsInChildren<T>()\tT[]"
			],
			[
				"h",
				"cycleHz\tfloat"
			],
			[
				"for",
				"foreach\tforeach"
			],
			[
				"getcom",
				"GetComponents(List<T> results)\tvoid"
			],
			[
				"col",
				"color\tColor { get; set; }"
			],
			[
				"color",
				"ColorSpace\tColorSpace"
			],
			[
				"Col",
				"Color32\tColor32"
			],
			[
				"sha",
				"DOShadowStrength(float endValue, float duration)\tTweener"
			]
		]
	},
	"buffers":
	[
		{
			"file": "README.md",
			"settings":
			{
				"buffer_size": 5976,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "Assets/scripts/MicrophoneInput.cs",
			"settings":
			{
				"buffer_size": 16285,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "Assets/scripts/LineOutput.cs",
			"settings":
			{
				"buffer_size": 1003,
				"encoding": "UTF-8 with BOM",
				"line_ending": "Unix"
			}
		},
		{
			"file": "Assets/scripts/Fps.cs",
			"settings":
			{
				"buffer_size": 563,
				"encoding": "UTF-8 with BOM",
				"line_ending": "Unix"
			}
		},
		{
			"file": "Assets/scripts/SSVEPKeyboardModel.cs",
			"settings":
			{
				"buffer_size": 4368,
				"encoding": "UTF-8 with BOM",
				"line_ending": "Unix"
			}
		},
		{
			"file": "Assets/scripts/ValueText.cs",
			"settings":
			{
				"buffer_size": 325,
				"encoding": "UTF-8 with BOM",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "pack",
		"selected_items":
		[
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"unity",
				"Set Syntax: Unity C#"
			],
			[
				"packa",
				"Preferences: Browse Packages"
			],
			[
				"",
				"Build With: Markdown"
			]
		],
		"width": 485.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"cd Omnisharp",
			"git clone https://github.com/nosami/OmniSharpServer.git",
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard",
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard/Assets",
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard/Assets/Resources",
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard/Assets/Resources/Text",
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard/Assets/scripts"
	],
	"file_history":
	[
		"/Users/ryanlintott/Dropbox/Apps/2Do/tod/o_u_k_00cfe30bfd474743b0f5241e16f231bf_p_aeddc909452b40f9b77aab3f49de5bd7_i_b976ae046be24b5ba59928cc06df2386_d_.tod",
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard/Assets/scripts/Fps.cs",
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard/Assets/scripts/LineOutput.cs",
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard/Assets/scripts/LevelManager.cs",
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard/Assets/scripts/SSVEPKeyboardModel.cs",
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard/Assets/scripts/PinchZoom.cs",
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard/Assets/scripts/DiffUI.cs",
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard/Assets/scripts/ChartLineDataUI.cs",
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard/Assets/scripts/InputUI.cs",
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard/.gitignore",
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard/Assets/scripts/SSVEPKeyboardSpriteView.cs",
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard/Assets/unity-ui-extensions/Scripts/Primitives/UILineRenderer.cs",
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard/Assets/scripts/ToggleEEG.cs",
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard/Assets/scripts/ScreenSizePlane.cs",
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard/Assets/unity-ui-extensions/Scripts/Primitives/UIPrimitiveBase.cs",
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard/Assets/scripts/ZoomSquares.cs",
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard/Assets/Resources/Text/yn.txt",
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard/Assets/scripts/FlickerSprite.cs",
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard/Assets/scripts/Flicker3D.cs",
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard/Assets/scripts/flicker.cs",
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard/Assets/scripts/EQView.cs",
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard/Assets/scripts/MicrophoneInput.cs",
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard/README.md",
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard/Assets/scripts/Flicker.cs",
		"/Volumes/Backpack/Dev/SSVEP_keyboard/SSVEP_keyboard/Assets/Resources/Text/keyboard.txt",
		"/Volumes/Backpack/Library/_Standards/_Squint_standards/3dsmax2014/scripts/squint_scripts/squint_startup.ms",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/scripts/SSVEPKeyboardView.cs",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/scripts/TextOutputDisplay.cs",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/scripts/RektTransform.cs",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/scripts/NextLetterProbability.cs",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/scripts/EQView.cs",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/scripts/Flicker.cs",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/scripts/LineOutput.cs",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/scripts/MicrophoneInput.cs",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/scripts/ToggleEEG.cs",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/Resources/Text/NextLetter.txt",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/Resources/Text/keyboard.txt",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/.gitignore",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/scripts/SSVEPKeyboardModel.cs",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/scripts/BlinkingCursor.cs",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/scripts/GridFitScreen.cs",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/SSVEP_keyboard.sublime-project",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/scripts/assigncolour.cs",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/scripts/KeyboardView.cs",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/scripts/KeyboardModel.cs",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/scripts/keyboardModel.cs",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/scripts/keyboardView.cs",
		"/Users/ryanlintott/Dev/Unity/SSVEP_keyboard/Assets/scripts/flicker.cs",
		"/Users/ryanlintott/Desktop/omnisharp-server-master/README.md",
		"/Users/ryanlintott/Dev/Rancon/702_messy_music_maker/Assets/Scripts/SpinClick.cs",
		"/Users/ryanlintott/Dev/Rancon/702_messy_music_maker/Assets/Scripts/AnimationClick.cs",
		"/Volumes/Backpack/Website/hanaryan/style.css",
		"/Users/ryanlintott/Dev/Rancon/702_messy_music_maker/Assets/Scripts/doodleproductions/messymusic/config/PopulateModelConfig.cs",
		"/Volumes/Backpack/Website/medievalandmodernbestiary/blog_posts/gloss_shortcode.php",
		"/Volumes/Backpack/Website/medievalandmodernbestiary/blog_posts/post_sample.html",
		"/Volumes/Backpack/Website/abetterwaytodo/public_html/wp-config.php",
		"/Volumes/Backpack/Website/ryanlintottcom/public_html/blog_backup_files/.htaccess",
		"/Volumes/Backpack/Website/ryanlintottcom/public_html/blog_backup_files/wp-config.php",
		"/Volumes/Backpack/Website/ryanlintottcom/public_html/blog_backup_files/wp-blog-header.php",
		"/Volumes/Backpack/Website/ryanlintottcom/public_html/blog/sunrise.php",
		"/Volumes/Backpack/Website/ryanlintottcom/public_html/blog_backup_files/.htaccess.backup",
		"/Users/ryanlintott/Dev/Unity/Messy_Music/Assets/Scripts/doodleproductions/messymusic/config/PopulateModelConfig.cs",
		"/Users/ryanlintott/Dev/Unity/Messy_Music/.gitignore",
		"/Users/ryanlintott/Dev/Unity/Messy_Music/Assets/Scripts/doodleproductions/messymusic/vo/OverlayAnimationVO.cs",
		"/Users/ryanlintott/Dev/Rancon/702_messy_music_maker/Assets/Scripts/doodleproductions/messymusic/events/RequestModelEvent.cs",
		"/Users/ryanlintott/Dev/Unity/Messy_Music/Assets/Scripts/SpinClick.cs",
		"/Library/Logs/CrashPlan/service.log.0",
		"/Users/ryanlintott/Dev/Unity/Messy_Music/messy-music.sublime-project",
		"/Users/ryanlintott/Library/Application Support/Sublime Text 3/Packages/User/C#.sublime-settings"
	],
	"find":
	{
		"height": 23.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"_chartLineDataUI",
			"smartphone",
			"SetLowestSampleRate",
			"_audio",
			"pitch",
			"sampleSetCounter",
			"_avgTimeSamples",
			"sampleSetPrev",
			"sampleProcessingMode",
			"sAvgWidth",
			"averageOverTime",
			"ReadSamples",
			"InitializeAudio",
			"t",
			"toggle",
			"_eqView",
			"EQView",
			"readsamples",
			"_readSamplesOn",
			"useClamp",
			"ResetSamples",
			"foreach",
			"triggerTime",
			"diff",
			"_avgTimeSamples",
			"ResetSamples",
			"numSamplesTaken",
			"averageOverTime",
			"sAvgWidth",
			"useMaxSamples",
			"max",
			"n",
			"sampleSetSize",
			"sampleSetCounter",
			"sampleSetProcessedPrev",
			"sampleSetPrev",
			"averageOverTime",
			"_avgTimeSamples",
			"useMaxSamples",
			"audio.clip",
			"ResetSamples",
			"specFFTwindow",
			"leftClamp",
			"ssvepHighValues[0]",
			"text",
			"averageOverTime",
			"logbase",
			"useMaxSamples",
			"useMax",
			"fMax",
			"sampleRate",
			"numSamples",
			"fmax",
			"_tone",
			"fRangeMin",
			"fMax",
			"sampleSetSize",
			"startValue",
			"fMax",
			"sampleSetSize",
			"useMaxSamples",
			"maxsamples",
			"boost",
			"Update",
			"eq",
			"keyboardActive",
			"build",
			"key",
			"toggle",
			"_keyboardFiles",
			"_nextLetterProbability",
			"lastLetter",
			"_SSVEPKeyboardView",
			"sampleRate",
			"fmax",
			"inputHz",
			"inputHZ",
			"sampleRate",
			"inputHz",
			"fps",
			"input",
			"44",
			"ssvepLowValues",
			" debug",
			"microphone",
			"inputHz",
			"maxSamples",
			"sAvgWidth",
			"audio",
			"inputHz",
			"ResetSamples",
			"averageSamples",
			"sampleaverage",
			"averageSamples",
			"SetKeyStates",
			"SetKeyboardKey",
			"SetKeyStates",
			"SetKeyboardKey",
			"flicker",
			"grid",
			"targetHz",
			"focusHzWidth",
			"targetHz",
			"eq",
			"b1",
			"screenSize",
			"SCALE_LINES_Y",
			"spectrumHolder",
			"createFreqBar",
			"spectrumHolder",
			"_spinning",
			"camera",
			"cookie",
			"sound",
			"SoundVO"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"processedSamples",
			"fTarget",
			"fWidth",
			"fTarget",
			"image"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": true,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "README.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5976,
						"regions":
						{
						},
						"selection":
						[
							[
								4147,
								4147
							]
						],
						"settings":
						{
							"apply_syntax_touched": true,
							"syntax": "Packages/Markdown/Markdown.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 455.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "Assets/scripts/MicrophoneInput.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16285,
						"regions":
						{
						},
						"selection":
						[
							[
								16263,
								16263
							]
						],
						"settings":
						{
							"apply_syntax_touched": true,
							"oops":
							{
								"1006,1025": "Name should have prefix '_'. (Rule 'Fields').",
								"10114,10119": "Parameter can be declared with base type",
								"10122,10126": "Parameter can be IList",
								"10174,10179": "Use 'var' keyword",
								"10414,10419": "Parameter can be declared with base type",
								"10422,10426": "Parameter can be IList",
								"10455,10456": "Parameter can be IComparable",
								"1048,1063": "Name should have prefix '_'. (Rule 'Fields').",
								"10497,10502": "Use 'var' keyword",
								"10880,10885": "Use 'var' keyword",
								"11094,11099": "Use 'var' keyword",
								"11386,11391": "Use 'var' keyword",
								"11661,11666": "Use 'var' keyword",
								"11902,11907": "Use 'var' keyword",
								"12220,12225": "Use 'var' keyword",
								"1225,1232": "Name should have prefix '_'. (Rule 'Fields').",
								"12425,12430": "Use 'var' keyword",
								"1272,1283": "Name should have prefix '_'. (Rule 'Fields').",
								"12791,12796": "Use 'var' keyword",
								"13373,13378": "Use 'var' keyword",
								"13843,13848": "Use 'var' keyword",
								"1427,1436": "Name should have prefix '_'. (Rule 'Fields').",
								"14433,14438": "Use 'var' keyword",
								"14754,14760": "Convert to constant",
								"14772,14778": "Convert to constant",
								"14792,14799": "Convert to constant",
								"14814,14821": "Convert to constant",
								"1511,1521": "Name should have prefix '_'. (Rule 'Fields').",
								"15672,15685": "'setTriggerLow' should start with an upper case letter. (Rule 'Methods')",
								"15693,15696": "Parameter can be IComparable",
								"15737,15751": "'setTriggerHigh' should start with an upper case letter. (Rule 'Methods')",
								"15759,15762": "Parameter can be IComparable",
								"15804,15815": "'setResetLow' should start with an upper case letter. (Rule 'Methods')",
								"15823,15826": "Parameter can be IComparable",
								"15865,15877": "'setResetHigh' should start with an upper case letter. (Rule 'Methods')",
								"15885,15888": "Parameter can be IComparable",
								"15928,15941": "'setTimeString' should start with an upper case letter. (Rule 'Methods')",
								"15970,15981": "Assignment is redundant",
								"16107,16125": "'setFrequencyString' should start with an upper case letter. (Rule 'Methods')",
								"16154,16161": "Assignment is redundant",
								"1771,1781": "Convert to constant",
								"1957,1958": "Initializing field by default value is redundant",
								"1973,1988": "Name should have prefix '_'. (Rule 'Fields').",
								"1991,1996": "Initializing field by default value is redundant",
								"2028,2029": "Initializing field by default value is redundant",
								"2127,2128": "Initializing field by default value is redundant",
								"2187,2196": "Name should have prefix '_'. (Rule 'Fields').",
								"2286,2306": "Name should have prefix '_'. (Rule 'Fields').",
								"2309,2310": "Initializing field by default value is redundant",
								"2420,2421": "Initializing field by default value is redundant",
								"2438,2449": "Name should have prefix '_'. (Rule 'Fields').",
								"2452,2453": "Initializing field by default value is redundant",
								"2467,2478": "Name should have prefix '_'. (Rule 'Fields').",
								"45,50": "Using directive is not used by code and can be removed safely.",
								"4570,4580": "Redundant ToString() call",
								"762,775": "Name should have prefix '_'. (Rule 'Fields').",
								"797,816": "Name should have prefix '_'. (Rule 'Fields')."
							},
							"syntax": "Packages/Unity3D/UnityC#.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 6395.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "Assets/scripts/LineOutput.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1003,
						"regions":
						{
						},
						"selection":
						[
							[
								287,
								287
							]
						],
						"settings":
						{
							"apply_syntax_touched": true,
							"oops":
							{
								"114,124": "Name should have prefix '_'. (Rule 'Fields').",
								"148,157": "Name should have prefix '_'. (Rule 'Fields').",
								"19,24": "Using directive is not used by code and can be removed safely.",
								"490,508": "'setFrequencyString' should start with an upper case letter. (Rule 'Methods')",
								"539,548": "Assignment is redundant",
								"88,96": "Name should have prefix '_'. (Rule 'Fields').",
								"955,966": "Parameter can be IComparable",
								"99,100": "Initializing field by default value is redundant"
							},
							"syntax": "Packages/Unity3D/UnityC#.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "Assets/scripts/Fps.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 563,
						"regions":
						{
						},
						"selection":
						[
							[
								275,
								392
							]
						],
						"settings":
						{
							"apply_syntax_touched": true,
							"syntax": "Packages/Unity3D/UnityC#.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "Assets/scripts/SSVEPKeyboardModel.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4368,
						"regions":
						{
						},
						"selection":
						[
							[
								1619,
								1619
							]
						],
						"settings":
						{
							"apply_syntax_touched": true,
							"oops":
							{
								"111,114": "Name should have prefix '_'. (Rule 'Fields').",
								"128,134": "Name should have prefix '_'. (Rule 'Fields').",
								"150,161": "Name should have prefix '_'. (Rule 'Fields').",
								"175,186": "Name should have prefix '_'. (Rule 'Fields').",
								"1875,1887": "Parameter can be IComparable",
								"19,24": "Using directive is not used by code and can be removed safely.",
								"309,310": "Initializing field by default value is redundant",
								"3248,3250": "Convert to 'return' statement",
								"3802,3806": "Redundant 'else' keyword",
								"3983,3995": "no known errors.",
								"410,428": "'_SSVEPKeyboardView' should start with a lower case letter. (Rule 'Fields')",
								"462,486": "'_SSVEPKeyboardSpriteView' should start with a lower case letter. (Rule 'Fields')",
								"808,819": "Name should have prefix '_'. (Rule 'Fields').",
								"838,846": "Name should have prefix '_'. (Rule 'Fields').",
								"849,854": "Initializing field by default value is redundant"
							},
							"syntax": "Packages/Unity3D/UnityC#.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1272.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "Assets/scripts/ValueText.cs",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 325,
						"regions":
						{
						},
						"selection":
						[
							[
								217,
								217
							]
						],
						"settings":
						{
							"apply_syntax_touched": true,
							"oops":
							{
								"0,5": "Using directive is not used by code and can be removed safely.",
								"26,31": "Using directive is not used by code and can be removed safely."
							},
							"syntax": "Packages/Unity3D/UnityC#.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 100.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.markdown":
	{
		"height": 100.0
	},
	"output.variable_get":
	{
		"height": 122.0
	},
	"pinned_build_system": "",
	"project": "SSVEP_keyboard.sublime-project",
	"replace":
	{
		"height": 42.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Dev/Unity/letter_pop/letter_pop.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 333.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
